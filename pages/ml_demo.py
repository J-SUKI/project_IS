import streamlit as st
import joblib
import numpy as np

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Scaler
@st.cache_resource
def load_model():
    return joblib.load("models/ml_model.pkl")  # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models/

@st.cache_resource
def load_scaler():
    return joblib.load("models/scaler.pkl")  # ‡πÇ‡∏´‡∏•‡∏î Scaler ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô

model = load_model()
scaler = load_scaler()

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á 11 Features
feature_names = [
    "Alcohol", "Malic Acid", "Ash", "Alcalinity of Ash", "Magnesium",
    "Total Phenols", "Flavanoids", "Nonflavanoid Phenols", 
    "Proanthocyanins", "Color Intensity", "Hue"
]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def map_quality_label(quality):
    if quality <= 4:
        return f"‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥ (‡∏£‡∏∞‡∏î‡∏±‡∏ö {quality})"
    elif quality <= 6:
        return f"‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏£‡∏∞‡∏î‡∏±‡∏ö {quality})"
    elif quality <= 8:
        return f"‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ (‡∏£‡∏∞‡∏î‡∏±‡∏ö {quality})"
    else:
        return f"‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏°‡∏≤‡∏Å  (‡∏£‡∏∞‡∏î‡∏±‡∏ö {quality})"

def show():
    st.title("üç∑ Wine Quality Prediction")

    # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    input_data = []
    cols = st.columns(4)  # ‡∏à‡∏±‡∏î Layout ‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß

    for i, feature in enumerate(feature_names):
        with cols[i % 4]:  # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ feature ‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 4 columns
            input_data.append(st.number_input(f"{feature}", value=0.0))

    # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
    if st.button("üîç ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå Wine Quality"):
        if all(value == 0.0 for value in input_data):
            st.warning("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå!")
        else:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ input ‡∏î‡πâ‡∏ß‡∏¢ Scaler ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•
            input_scaled = scaler.transform([np.array(input_data)])
            prediction = model.predict(input_scaled)

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
            quality_label = map_quality_label(prediction[0])

            st.success(f"üç∑ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå: {quality_label}")

show()
